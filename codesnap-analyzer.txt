Project Directory: codesnap
Total Files Analyzed: 17
Total Size: 0.03 MB
Date: 2025-01-01T17:14:36.611Z

Token counts by model:
   GPT-3.5: 6.7K
   GPT-4:   6.7K
   Claude:  6.7K
   LLaMA 2: 7.4K

Directory structure:
├── src/
│   ├── __tests__/
│   │   └── cli.test.ts
│   ├── constants/
│   │   ├── analyze.ts
│   │   └── patterns.ts
│   ├── core/
│   │   └── analyzer.ts
│   ├── services/
│   │   ├── codesnap.ts
│   │   └── formatter.ts
│   ├── types/
│   │   └── types.ts
│   ├── utils/
│   │   ├── file.ts
│   │   └── token-counter.ts
│   ├── cli.ts
│   └── index.ts
├── .gitignore
├── eslint.config.mjs
├── jestconfig.json
├── package.json
├── README.md
└── tsconfig.json

================================================
File: README.md
================================================
# CodeSnap Analyzer Node.js
https://github.com/phamhung075/codesnap-analyzer

A tool for creating comprehensive snapshots of your codebase with token counting for LLMs.
result like GitIngest
## Installation

```bash
npm install -g codesnap-analyzer
```

## Usage

### Command Line

```bash
# Analyze current directory
codesnap

# Analyze specific directory
codesnap ./my-project

# With options
codesnap . -o output.txt -i "*.ts" "*.tsx" -e "tests" "docs"
```

### Programmatic Usage

```typescript
import { analyze } from 'codesnap-analyzer';

async function analyzeProject() {
  const result = await analyze('./my-project', {
    output: 'analysis.txt',
    includePatterns: ['*.ts', '*.tsx'],
    excludePatterns: ['tests', 'docs']
  });

  console.log(result.summary);
  console.log(result.tokenCounts);
}
```

## Features

- Comprehensive codebase analysis
- Token counting for multiple LLM models (GPT-3.5, GPT-4, Claude, LLaMA 2)
- Respect .gitignore patterns
- Customizable include/exclude patterns
- Binary file detection
- Size limits handling
- Tree structure visualization

## Options

- \`output\`: Output file path
- \`excludePatterns\`: Additional patterns to exclude
- \`includePatterns\`: Patterns to include

## Token Counting

Provides token counts for:
- GPT-3.5
- GPT-4
- Claude
- LLaMA 2

## License

MIT


================================================
File: .gitignore
================================================
# Dependencies
node_modules/
package-lock.json
yarn.lock
.npm/
pnpm-lock.yaml

# Build outputs
dist/
build/
lib/
*.tsbuildinfo

# Testing
coverage/
.nyc_output/
jest-report/
test-report/

# Logs
logs/
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# IDEs and editors
.idea/
.vscode/
*.swp
*.swo
.DS_Store
.env
.env.*
!.env.example

# Temporary files
.temp/
.tmp/
.cache/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Docs
docs/_build/
docs/_static/
docs/_templates/

# Debug logs
debug.log
debug.test.log

# Output directories
output/
codesnap/



================================================
File: eslint.config.mjs
================================================
import globals from "globals";
import pluginJs from "@eslint/js";
import tseslint from "typescript-eslint";


/** @type {import('eslint').Linter.Config[]} */
export default [
  {files: ["**/*.{js,mjs,cjs,ts}"]},
  {files: ["**/*.js"], languageOptions: {sourceType: "commonjs"}},
  {languageOptions: { globals: globals.browser }},
  pluginJs.configs.recommended,
  ...tseslint.configs.recommended,
];

================================================
File: jestconfig.json
================================================
{
  "preset": "ts-jest",
  "testEnvironment": "node",
  "roots": ["<rootDir>/src"],
  "transform": {
    "^.+\\.tsx?$": "ts-jest"
  },
  "moduleFileExtensions": ["ts", "tsx", "js", "jsx", "json", "node"]
}


================================================
File: package.json
================================================
{
  "name": "codesnap-analyzer",
  "version": "1.0.1",
  "description": "Create comprehensive snapshots of your codebase with token counting for LLMs",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "bin": {
    "codesnap": "./dist/cli.js"
  },
  "files": [
    "dist",
    "LICENSE",
    "README.md"
  ],
  "scripts": {
    "clean": "rimraf dist",
    "build": "npm run clean && tsc",
    "start": "node dist/cli.js",
    "dev": "ts-node src/cli.ts",
    "prepare": "npm run build",
    "prepublishOnly": "npm test && npm run lint",
    "preversion": "npm run lint",
    "version": "npm run format && git add -A src",
    "postversion": "git push && git push --tags",
    "format": "prettier --write \"src/**/*.ts\"",
    "lint": "eslint \"src/**/*.ts\" --fix",
    "test": "jest --config jestconfig.json",
    "bump": "npm version patch --no-git-tag-version",
    "release": "npm run bump && npm publish"
  },
  "repository": {
    "type": "git",
    "url": "git+https://github.com/yourusername/codesnap-analyzer.git"
  },
  "keywords": [
    "code-analysis",
    "token-counting",
    "llm",
    "gpt",
    "claude",
    "codebase-analysis",
    "code-scanner",
    "static-analysis",
    "token-counter"
  ],
  "author": "Your Name <your.email@example.com>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/yourusername/codesnap-analyzer/issues"
  },
  "homepage": "https://github.com/yourusername/codesnap-analyzer#readme",
  "dependencies": {
    "@dqbd/tiktoken": "^1.0.7",
    "commander": "^11.0.0",
    "fs-extra": "^11.1.1",
    "minimatch": "^5.1.6"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@types/fs-extra": "^11.0.1",
    "@types/jest": "^29.5.14",
    "@types/minimatch": "^5.1.2",
    "@types/node": "^20.4.5",
    "@typescript-eslint/eslint-plugin": "^6.2.0",
    "@typescript-eslint/parser": "^6.2.0",
    "eslint": "^8.57.1",
    "eslint-config-prettier": "^8.9.0",
    "eslint-plugin-prettier": "^5.0.0",
    "globals": "^15.14.0",
    "jest": "^29.7.0",
    "prettier": "^3.0.0",
    "rimraf": "^5.0.1",
    "ts-jest": "^29.1.1",
    "ts-node": "^10.9.1",
    "typescript": "^5.1.6",
    "typescript-eslint": "^8.19.0"
  },
  "engines": {
    "node": ">=14.0.0"
  },
  "publishConfig": {
    "access": "public"
  }
}


================================================
File: src/__tests__/cli.test.ts
================================================
describe('Sample Test', () => {
  it('should pass this test', () => {
    expect(true).toBe(true);
  });
});

================================================
File: src/cli.ts
================================================
#!/usr/bin/env node

import { Command } from 'commander';
import { analyze, AnalyzeOptions } from './index';
import path from 'path';
import fs from 'fs-extra';
async function main() {
    const program = new Command();

    program
        .name('codesnap')
        .description('Create a comprehensive snapshot of your codebase')
        .argument('[directory]', 'Directory to analyze', '.')
        .option('-o, --output <path>', 'Output file path')
        .option('-e, --exclude <patterns...>', 'Additional patterns to exclude')
        .option('-i, --include <patterns...>', 'Patterns to include')
        .action(async (directory: string, options: AnalyzeOptions) => {
            try {
                // Resolve project directory
                const projectDir = path.resolve(directory);

                let projectName = path.basename(projectDir);
                try {
                    const packageJsonPath = path.join(projectDir, 'package.json');
                    if (fs.existsSync(packageJsonPath)) {
                        const packageJson = JSON.parse(fs.readFileSync(packageJsonPath, 'utf-8'));
                        projectName = packageJson.name || projectName;
                    }
                } catch {
                    // Fallback to folder name if package.json doesn't exist
                    projectName = path.basename(projectDir);
                }

                // Sanitize project name for filenames
                projectName = projectName.replace(/[^a-zA-Z0-9-_]/g, '_');


                // Default output path if not specified
                if (!options.output) {
                    const outputDir = path.join(projectDir, 'codesnap');
                    await fs.ensureDir(outputDir);
                    options.output = path.join(outputDir, `${projectName}.txt`);
                }

                console.log('📸 Starting CodeSnap analysis...');
                console.log(`📁 Project: ${projectName}`);
                console.log(`📂 Directory: ${projectDir}`);
                console.log(`📝 Output will be saved to: ${options.output}`);

                // Perform analysis
                const result = await analyze(projectDir, {
                    output: options.output,
                    exclude: options.exclude,
                    include: options.include,
                });

                console.log('\n✅ Analysis completed successfully!');
                console.log('📊 Summary:');
                console.log(result.summary);

            } catch (error) {
                console.error(`\n❌ Error: ${(error as Error).message}`);
                process.exit(1);
            }
        });

    program.parse();
}

main();


================================================
File: src/constants/analyze.ts
================================================
export const FILE_LIMITS = {
    MAX_FILE_SIZE: 10 * 1024 * 1024, // 10 MB
    MAX_FILES: 10_000,
    MAX_TOTAL_SIZE: 500 * 1024 * 1024, // 500 MB
  } as const;

================================================
File: src/constants/patterns.ts
================================================
export const DEFAULT_IGNORE_PATTERNS = [
    // Node
    "node_modules",
    "package-lock.json",
    "yarn.lock",
    ".npm",
    // Version Control
    ".git",
    ".svn",
    ".hg",
    // Build
    "dist",
    "build",
    "out",
    // IDE
    ".idea",
    ".vscode",
    // Temp
    ".tmp",
    "tmp",
    // OS
    ".DS_Store",
    "Thumbs.db",
    // Common binary files
    "*.jpg",
    "*.jpeg",
    "*.png",
    "*.gif",
    "*.ico",
    "*.pdf",
    "*.exe",
    "*.dll",
    "*.so",
    "*.dylib",
    "codesnap"
  ] as const;

================================================
File: src/core/analyzer.ts
================================================
// src/_core/helper/codesnap/services/analyzer.ts
import fs from 'fs-extra';
import path from 'path';
import { Minimatch } from 'minimatch';
import { FileInfo, DirectoryStats, AnalyzeOptions, AnalyzeResult, TokenCount } from '../types/types';
import { FILE_LIMITS } from '../constants/analyze';
import { DEFAULT_IGNORE_PATTERNS } from '../constants/patterns';
import { FileUtils } from '../utils/file';
import { TokenCounter } from '../utils/token-counter';
import { OutputFormatter } from '../services/formatter';

export class DirectoryAnalyzer {
    private readonly directory: string;
    private readonly options: AnalyzeOptions;
    private readonly ignorePatterns: string[];

    constructor(directory: string, options: AnalyzeOptions = {}) {
        this.directory = directory;
        this.options = options;
        this.ignorePatterns = this.loadGitignorePatterns();
    }

    private loadGitignorePatterns(): string[] {
        const allPatterns: Set<string> = new Set();
        const gitignorePath = path.join(this.directory, '.gitignore');

        // First add default patterns
        DEFAULT_IGNORE_PATTERNS.forEach(pattern => allPatterns.add(pattern));

        console.log('\n🔍 Looking for .gitignore at:', gitignorePath);

        try {
            if (fs.existsSync(gitignorePath)) {
                console.log('✅ Found .gitignore file');
                const gitignoreContent = fs.readFileSync(gitignorePath, 'utf-8');
                const gitignorePatterns = gitignoreContent
                    .split('\n')
                    .map(line => line.trim())
                    .filter(line => line && !line.startsWith('#'));

                gitignorePatterns.forEach(pattern => {
                    allPatterns.add(pattern);
                    // Add version with trailing slash for directories if not present
                    if (!pattern.endsWith('/')) {
                        allPatterns.add(`${pattern}/`);
                    }
                });

                console.log('\n📋 Active ignore patterns:');
                console.log('\n   Default patterns:');
                DEFAULT_IGNORE_PATTERNS.forEach(pattern => {
                    console.log(`   - ${pattern}`);
                });

                console.log('\n   From .gitignore:');
                gitignorePatterns.forEach(pattern => {
                    console.log(`   - ${pattern}`);
                });
            } else {
                console.log('❌ No .gitignore file found');
                console.log('\n📋 Using only default ignore patterns:');
                DEFAULT_IGNORE_PATTERNS.forEach(pattern => {
                    console.log(`   - ${pattern}`);
                });
            }
        } catch (error) {
            console.warn('❌ Error reading .gitignore:', error);
        }

        return Array.from(allPatterns);
    }

    private shouldSkipDirectory(dirPath: string): boolean {
        const relativePath = path.relative(this.directory, dirPath).replace(/\\/g, '/');
        return this.ignorePatterns.some(pattern => {
            pattern = pattern.replace(/\/$/, '');

            // For directory patterns without wildcards
            if (!pattern.includes('*')) {
                return relativePath === pattern || relativePath.startsWith(`${pattern}/`);
            }

            // For patterns with wildcards
            const matcher = new Minimatch(pattern, { dot: true });
            return matcher.match(relativePath);
        });
    }

    private shouldSkipFile(filePath: string): boolean {
        const relativePath = path.relative(this.directory, filePath).replace(/\\/g, '/');
        return this.ignorePatterns.some(pattern => {
            // Remove trailing slash if exists
            pattern = pattern.replace(/\/$/, '');

            // For exact file matches without wildcards
            if (!pattern.includes('*')) {
                return relativePath === pattern;
            }

            // For patterns with wildcards
            const matcher = new Minimatch(pattern, { dot: true });
            return matcher.match(relativePath);
        });
    }

    private async getAllFiles(dir: string): Promise<string[]> {
        const entries = await fs.readdir(dir, { withFileTypes: true });
        const files: string[] = [];

        for (const entry of entries) {
            const fullPath = path.join(dir, entry.name);
            const relativePath = path.relative(this.directory, fullPath).replace(/\\/g, '/');

            if (entry.isDirectory()) {
                if (this.shouldSkipDirectory(fullPath)) {
                    console.log(`   ⏭️  Skipping directory: ${relativePath} (matches ignore pattern)`);
                    continue;
                }
                files.push(...(await this.getAllFiles(fullPath)));
            } else {
                if (this.shouldSkipFile(fullPath)) {
                    console.log(`   ⏭️  Skipping file: ${relativePath} (matches ignore pattern)`);
                    continue;
                }
                files.push(fullPath);
            }
        }

        return files.sort();
    }

    async analyze(): Promise<{ files: FileInfo[], stats: DirectoryStats, tokenCounts: TokenCount }> {
        console.log('\n📂 Starting directory analysis...');
        console.log(`📁 Base directory: ${this.directory}`);

        const stats: DirectoryStats = {
            totalFiles: 0,
            totalSize: 0
        };

        const files: FileInfo[] = [];
        const maxFileSize = this.options.maxFileSize || FILE_LIMITS.MAX_FILE_SIZE;

        console.log(`\n⚙️  Settings:`);
        console.log(`   Max file size: ${(maxFileSize / 1024 / 1024).toFixed(2)} MB`);
        console.log(`   Max total files: ${FILE_LIMITS.MAX_FILES}`);
        console.log(`   Max total size: ${(FILE_LIMITS.MAX_TOTAL_SIZE / 1024 / 1024).toFixed(2)} MB`);

        console.log('\n🔍 Scanning for files...');
        const allFiles = await this.getAllFiles(this.directory);
        console.log(`✨ Found ${allFiles.length} files total`);

        console.log('\n📄 Processing files:');
        for (const filePath of allFiles) {
            const relativePath = path.relative(this.directory, filePath).replace(/\\/g, '/');
            const fileSize = (await fs.stat(filePath)).size;

            const isText = await FileUtils.isTextFile(filePath);
            let content: string | null = null;

            if (isText && fileSize <= maxFileSize) {
                try {
                    content = await FileUtils.readFileContent(filePath);
                    console.log(`   ✅ Reading: ${relativePath}`);
                } catch (error) {
                    console.warn(`   ❌ Failed to read: ${relativePath} - Error: ${error}`);
                    continue;
                }
            } else {
                const skipReason = [];
                if (!isText) skipReason.push('binary file');
                if (fileSize > maxFileSize) skipReason.push('file too large');
                console.log(`   ⏭️  Skipping content for: ${relativePath} (${skipReason.join(', ')})`);
            }

            files.push({
                path: relativePath,
                content,
                size: fileSize
            });

            stats.totalFiles += 1;
            stats.totalSize += fileSize;

            if (stats.totalFiles > FILE_LIMITS.MAX_FILES) {
                console.log('\n⚠️  Reached maximum file limit');
                break;
            }
            if (stats.totalSize > FILE_LIMITS.MAX_TOTAL_SIZE) {
                console.log('\n⚠️  Reached maximum total size limit');
                break;
            }
        }

        // Calculate tokens
        const allContent = files
            .map(file => file.content)
            .filter((content): content is string => content !== null)
            .join('\n');

        const tokenCounts = await TokenCounter.countTokens(allContent);

        console.log('\n📊 Analysis complete!');
        console.log(`   Total files processed: ${stats.totalFiles}`);
        console.log(`   Total size: ${(stats.totalSize / 1024 / 1024).toFixed(2)} MB`);
        console.log('\n' + TokenCounter.formatTokenCounts(tokenCounts));

        return { files: files.sort((a, b) => a.path.localeCompare(b.path)), stats, tokenCounts };
    }

}

export async function analyze(directory: string, options: AnalyzeOptions = {}): Promise<AnalyzeResult> {
  const analyzer = new DirectoryAnalyzer(directory, options);
  const { files, stats, tokenCounts } = await analyzer.analyze();
  
  // Create summary and tree using the formatter
  const summary = OutputFormatter.createSummary(directory, stats, tokenCounts);
  const tree = OutputFormatter.createTree(files);
  const content = OutputFormatter.createContent(files);

  // Write to output file if specified
  if (options.output) {
    const outputContent = `${summary}\n\n${tree}\n\n${content}`;
    await fs.ensureDir(path.dirname(options.output));
    await fs.writeFile(options.output, outputContent, 'utf-8');
  }

  return {
    files,
    stats,
    tokenCounts,
    summary,
    tree
  };
}

================================================
File: src/index.ts
================================================
export { CodeSnap } from './services/codesnap';
export type { 
    AnalyzeOptions, 
    AnalyzeResult, 
    FileInfo, 
    DirectoryStats 
} from './types/types';

// Export a convenience function
import { CodeSnap } from './services/codesnap';
import type { AnalyzeOptions, AnalyzeResult } from './types/types';

export async function analyze(
    directory: string,
    options: AnalyzeOptions = {}
): Promise<AnalyzeResult> {
    return CodeSnap.analyze(directory, options);
}

================================================
File: src/services/codesnap.ts
================================================
// src/services/codesnap.ts
import path from 'path';
import fs from 'fs-extra';
import { AnalyzeOptions, AnalyzeResult } from '../types/types';
import { DirectoryAnalyzer } from '../core/analyzer';
import { OutputFormatter } from '../services/formatter';
import { FileUtils } from '../utils/file';

export class CodeSnap {
  static async analyze(
    directory: string,
    options: AnalyzeOptions = {}
  ): Promise<AnalyzeResult> {
    const absolutePath = path.resolve(directory);
    
    if (!await fs.pathExists(absolutePath)) {
      throw new Error(`Directory not found: ${directory}`);
    }

    const analyzer = new DirectoryAnalyzer(absolutePath, options);
    const { files, stats, tokenCounts } = await analyzer.analyze();

    const summary = OutputFormatter.createSummary(absolutePath, stats, tokenCounts);
    const tree = OutputFormatter.createTree(files);

    if (options.output) {
      // Write the complete analysis to the output file
      const content = OutputFormatter.createContent(files);
      await FileUtils.writeOutput(
        options.output,
        `${summary}\n\n${tree}\n\n${content}`
      );
    }

    return {
      files,
      stats,
      tokenCounts,
      summary,
      tree
    };
  }
}

================================================
File: src/services/formatter.ts
================================================
// src/services/formatter.ts
import path from 'path';
import { FileInfo, DirectoryStats, TokenCount } from '../types/types';

interface TreeNode {
  name: string;
  type: 'file' | 'directory';
  children: TreeNode[];
  path: string;
}

export class OutputFormatter {
  static createSummary(directory: string, stats: DirectoryStats, tokenCounts: TokenCount): string {
    const lines = [
      `Project Directory: ${path.basename(directory)}`,
      `Total Files Analyzed: ${stats.totalFiles}`,
      `Total Size: ${(stats.totalSize / 1024 / 1024).toFixed(2)} MB`,
      `Date: ${new Date().toISOString()}`,
      '',
      'Token counts by model:',
      `   GPT-3.5: ${this.formatNumber(tokenCounts.gpt35)}`,
      `   GPT-4:   ${this.formatNumber(tokenCounts.gpt4)}`,
      `   Claude:  ${this.formatNumber(tokenCounts.claude)}`,
      `   LLaMA 2: ${this.formatNumber(tokenCounts.llama2)}`
    ];

    return lines.join('\n');
  }

  private static formatNumber(num: number): string {
    if (num >= 1_000_000) {
      return `${(num / 1_000_000).toFixed(2)}M`;
    }
    if (num >= 1_000) {
      return `${(num / 1_000).toFixed(1)}K`;
    }
    return num.toString();
  }

  static createTree(files: FileInfo[]): string {
    const tree = this.buildFileTree(files);
    const lines = ['Directory structure:', ...this.renderTree(tree)];
    return lines.join('\n');
  }

  private static buildFileTree(files: FileInfo[]): TreeNode {
    const root: TreeNode = {
      name: '',
      type: 'directory',
      children: [],
      path: ''
    };

    // Sort files to ensure consistent ordering
    const sortedFiles = [...files].sort((a, b) => a.path.localeCompare(b.path));

    for (const file of sortedFiles) {
      const parts = file.path.split(/[\\/]/);
      let currentNode = root;

      // Process each part of the path
      for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        const isFile = i === parts.length - 1;
        const nodePath = parts.slice(0, i + 1).join('/');

        // Find existing node or create new one
        let node = currentNode.children.find(n => n.name === part);
        
        if (!node) {
          node = {
            name: part,
            type: isFile ? 'file' : 'directory',
            children: [],
            path: nodePath
          };
          currentNode.children.push(node);
          
          // Sort children after adding new node
          currentNode.children.sort((a, b) => {
            // Directories come first
            if (a.type !== b.type) {
              return a.type === 'directory' ? -1 : 1;
            }
            // Then sort alphabetically
            return a.name.localeCompare(b.name);
          });
        }

        currentNode = node;
      }
    }

    return root;
  }

  private static renderTree(node: TreeNode, prefix: string = '', isLast: boolean = true, level: number = 0): string[] {
    const lines: string[] = [];

    if (node.name) {
      const line = prefix + (isLast ? '└── ' : '├── ') + node.name + (node.type === 'directory' ? '/' : '');
      lines.push(line);
    }

    const childPrefix = node.name ? prefix + (isLast ? '    ' : '│   ') : '';

    if (node.type === 'directory') {
      node.children.forEach((child, index) => {
        const isLastChild = index === node.children.length - 1;
        lines.push(...this.renderTree(child, childPrefix, isLastChild, level + 1));
      });
    }

    return lines;
  }

  static createContent(files: FileInfo[]): string {
    const output: string[] = [];
    const separator = '=' + '='.repeat(47) + '\n';

    // Add README.md first if it exists
    const readme = files.find(f => f.path.toLowerCase() === 'readme.md');
    if (readme?.content) {
      output.push(separator + `File: ${readme.path}\n` + separator + readme.content + '\n');
    }

    // Add all other files
    files.forEach(file => {
      if (file.content && file.path.toLowerCase() !== 'readme.md') {
        output.push(separator + `File: ${file.path}\n` + separator + file.content + '\n');
      }
    });

    return output.join('\n');
  }
}

================================================
File: src/types/types.ts
================================================
export interface AnalyzeOptions {
    maxFileSize?: number;
    include?: string[];
    exclude?: string[];
    output?: string | null;
}

export interface AnalyzeResult {
    files: FileInfo[];
    stats: DirectoryStats;
    tokenCounts: TokenCount;
    summary: string;
    tree: string;
}

export interface FileInfo {
    path: string;
    content: string | null;
    size: number;
}

export interface DirectoryStats {
    totalFiles: number;
    totalSize: number;
}

export interface TokenCount {
  gpt35: number;
  gpt4: number;
  claude: number;
  llama2: number;
}


================================================
File: src/utils/file.ts
================================================
import fs from 'fs-extra';

export class FileUtils {
  static async isTextFile(filePath: string): Promise<boolean> {
    try {
      const buffer = await fs.readFile(filePath);
      const sample = buffer.slice(0, 1024);
      
      for (const byte of sample) {
        if (byte === 0 || (byte < 32 && ![9, 10, 13].includes(byte))) {
          return false;
        }
      }
      return true;
    } catch (error) {
      console.error(`Error checking if file is text: ${error}`);
      return false;
    }
  }

  static async readFileContent(filePath: string): Promise<string> {
    return fs.readFile(filePath, 'utf-8');
  }

  static async writeOutput(filePath: string, content: string): Promise<void> {
    await fs.writeFile(filePath, content, 'utf-8');
  }
}

================================================
File: src/utils/token-counter.ts
================================================
// src/_core/helper/codesnap/utils/token-counter.ts
import { get_encoding, encoding_for_model } from '@dqbd/tiktoken';
import type { TiktokenModel } from '@dqbd/tiktoken';
import { TokenCount } from '../types/types';


export class TokenCounter {
  // Initialize tiktoken encoders
  private static async getTokenizer(model: TiktokenModel) {
    try {
      return encoding_for_model(model);
    } catch (error) {
      console.error(`Error checking if file is text: ${error}`);
      return get_encoding('cl100k_base');  // fallback to base encoding
    }
  }

  // GPT-3.5 tokens using tiktoken
  static async countGPT35Tokens(text: string): Promise<number> {
    const encoder = await this.getTokenizer('gpt-3.5-turbo');
    return encoder.encode(text).length;
  }

  // GPT-4 tokens using tiktoken
  static async countGPT4Tokens(text: string): Promise<number> {
    const encoder = await this.getTokenizer('gpt-4');
    return encoder.encode(text).length;
  }

  // Claude tokens using cl100k_base encoding
  static async countClaudeTokens(text: string): Promise<number> {
    const encoder = await get_encoding('cl100k_base');
    return encoder.encode(text).length;
  }

  // LLaMA 2 tokens (approximation using cl100k_base)
  static async countLlama2Tokens(text: string): Promise<number> {
    const encoder = await get_encoding('cl100k_base');
    return Math.ceil(encoder.encode(text).length * 1.1); // 10% margin for differences
  }

  // Count tokens for all models
  static async countTokens(text: string): Promise<TokenCount> {
    const [gpt35, gpt4, claude, llama2] = await Promise.all([
      this.countGPT35Tokens(text),
      this.countGPT4Tokens(text),
      this.countClaudeTokens(text),
      this.countLlama2Tokens(text)
    ]);

    return {
      gpt35,
      gpt4,
      claude,
      llama2
    };
  }

  // Format token counts in a readable way
  static formatTokenCounts(counts: TokenCount): string {
    return [
      'Token counts by model:',
      `   GPT-3.5: ${this.formatNumber(counts.gpt35)}`,
      `   GPT-4:   ${this.formatNumber(counts.gpt4)}`,
      `   Claude:  ${this.formatNumber(counts.claude)}`,
      `   LLaMA 2: ${this.formatNumber(counts.llama2)}`
    ].join('\n');
  }

  private static formatNumber(num: number): string {
    if (num >= 1_000_000) {
      return `${(num / 1_000_000).toFixed(2)}M`;
    }
    if (num >= 1_000) {
      return `${(num / 1_000).toFixed(1)}K`;
    }
    return num.toString();
  }
}

================================================
File: tsconfig.json
================================================
{
  "compilerOptions": {
    "module": "commonjs",
    "target": "es2020",
    "rootDir": "./src",
    "outDir": "./dist",
    "resolveJsonModule": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true,
    "types": ["node", "jest"]
  },
  "include": ["src"],
  "exclude": ["node_modules", "dist", "**/*.test.ts"]
}
